package com.desafios.admision_mtn.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.tags.Tag;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configuraci√≥n de OpenAPI/Swagger para documentaci√≥n interactiva de APIs
 * 
 * Genera documentaci√≥n autom√°tica para todos los endpoints del sistema de admisi√≥n
 * incluyendo autenticaci√≥n JWT, ejemplos de uso y esquemas de datos.
 */
@Configuration
public class OpenApiConfig {

    @Value("${server.port:8080}")
    private String serverPort;

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(apiInfo())
                .servers(List.of(
                    new Server()
                        .url("http://localhost:" + serverPort)
                        .description("Servidor de desarrollo local"),
                    new Server()
                        .url("https://api-admision.mtn.cl")
                        .description("Servidor de producci√≥n (cuando est√© disponible)")
                ))
                .components(new Components()
                    .addSecuritySchemes("bearerAuth", new SecurityScheme()
                        .type(SecurityScheme.Type.HTTP)
                        .scheme("bearer")
                        .bearerFormat("JWT")
                        .description("Token JWT obtenido del endpoint /api/auth/login"))
                    .addSecuritySchemes("professorAuth", new SecurityScheme()
                        .type(SecurityScheme.Type.HTTP)
                        .scheme("bearer")
                        .bearerFormat("JWT")
                        .description("Token JWT para profesores obtenido del endpoint /api/auth/professor-login"))
                )
                .security(List.of(
                    new SecurityRequirement().addList("bearerAuth"),
                    new SecurityRequirement().addList("professorAuth")
                ))
                .tags(List.of(
                    new Tag().name("Authentication").description("Endpoints de autenticaci√≥n y autorizaci√≥n"),
                    new Tag().name("Applications").description("Gesti√≥n de postulaciones de admisi√≥n"),
                    new Tag().name("Users").description("Gesti√≥n de usuarios del sistema"),
                    new Tag().name("Students").description("Gesti√≥n de informaci√≥n de estudiantes"),
                    new Tag().name("Interviews").description("Sistema de entrevistas del proceso de admisi√≥n"),
                    new Tag().name("Evaluations").description("Sistema de evaluaciones acad√©micas y psicol√≥gicas"),
                    new Tag().name("Documents").description("Gesti√≥n de documentos y archivos"),
                    new Tag().name("Notifications").description("Sistema de notificaciones automatizadas"),
                    new Tag().name("Dashboard").description("Dashboards y reportes administrativos"),
                    new Tag().name("Workflow").description("Flujo autom√°tico de estados y transiciones"),
                    new Tag().name("Validation").description("Validaciones de transiciones de estado"),
                    new Tag().name("Analytics").description("An√°lisis y m√©tricas del sistema")
                ));
    }

    private Info apiInfo() {
        return new Info()
                .title("API Sistema de Admisi√≥n MTN")
                .description("""
                    # Sistema de Admisi√≥n - Colegio Monte Tabor y Nazaret
                    
                    API REST completa para la gesti√≥n del proceso de admisi√≥n escolar.
                    
                    ## Caracter√≠sticas Principales
                    
                    ### üîê Autenticaci√≥n Dual
                    - **Autenticaci√≥n Regular**: Para administradores y apoderados
                    - **Autenticaci√≥n de Profesores**: Sistema separado para evaluadores
                    
                    ### üë• Roles de Usuario
                    - **ADMIN**: Administradores del sistema con acceso completo
                    - **CYCLE_DIRECTOR**: Directores de ciclo para entrevistas y evaluaciones
                    - **PSYCHOLOGIST**: Psic√≥logos para evaluaciones especializadas
                    - **TEACHER_LANGUAGE**: Profesores de lenguaje
                    - **TEACHER_MATHEMATICS**: Profesores de matem√°ticas  
                    - **TEACHER_ENGLISH**: Profesores de ingl√©s
                    - **APODERADO**: Padres/apoderados que postulan estudiantes
                    
                    ### üîÑ Flujo de Estados de Aplicaciones
                    ```
                    PENDING ‚Üí UNDER_REVIEW ‚Üí INTERVIEW_SCHEDULED ‚Üí EXAM_SCHEDULED ‚Üí APPROVED/REJECTED/WAITLIST
                    ```
                    
                    ### üöÄ Funcionalidades Avanzadas
                    - ‚úÖ Workflow autom√°tico de estados
                    - ‚úÖ Sistema de notificaciones por email
                    - ‚úÖ Gesti√≥n completa de entrevistas
                    - ‚úÖ Dashboards y reportes administrativos
                    - ‚úÖ Validaciones de transiciones de estado
                    - ‚úÖ Sistema de evaluaciones multi-tipo
                    - ‚úÖ Gesti√≥n de documentos y archivos
                    
                    ## Autenticaci√≥n
                    
                    ### Para Administradores y Apoderados:
                    ```http
                    POST /api/auth/login
                    Content-Type: application/json
                    
                    {
                        "email": "admin@mtn.cl",
                        "password": "password"
                    }
                    ```
                    
                    ### Para Profesores:
                    ```http
                    POST /api/auth/professor-login  
                    Content-Type: application/json
                    
                    {
                        "email": "profesor@mtn.cl",
                        "password": "password"
                    }
                    ```
                    
                    Ambos endpoints retornan un token JWT que debe incluirse en el header Authorization:
                    ```
                    Authorization: Bearer <jwt-token>
                    ```
                    
                    ## C√≥digos de Estado
                    - **200**: Operaci√≥n exitosa
                    - **201**: Recurso creado exitosamente
                    - **400**: Error en la petici√≥n (datos inv√°lidos)
                    - **401**: No autenticado (token faltante o inv√°lido)
                    - **403**: No autorizado (sin permisos para la operaci√≥n)
                    - **404**: Recurso no encontrado
                    - **409**: Conflicto (ej: email ya existe)
                    - **500**: Error interno del servidor
                    
                    ## Versionado
                    Actualmente en versi√≥n 1.0.0. Cambios futuros mantendr√°n compatibilidad hacia atr√°s.
                    
                    ## Soporte
                    Para soporte t√©cnico, contactar al equipo de desarrollo.
                    """)
                .version("1.0.0")
                .contact(new Contact()
                        .name("Equipo de Desarrollo MTN")
                        .email("desarrollo@mtn.cl")
                        .url("https://www.mtn.cl"))
                .license(new License()
                        .name("Licencia Propietaria")
                        .url("https://www.mtn.cl/licencia"));
    }
}