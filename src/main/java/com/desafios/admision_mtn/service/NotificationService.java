package com.desafios.admision_mtn.service;

import com.desafios.admision_mtn.entity.Application;
import com.desafios.admision_mtn.entity.Interview;
import com.desafios.admision_mtn.entity.User;
import com.desafios.admision_mtn.entity.Evaluation;
import com.desafios.admision_mtn.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * Servicio de notificaciones automatizadas del sistema de admisiones
 * 
 * TIPOS DE NOTIFICACIONES:
 * - üìß Cambios de estado de aplicaciones
 * - üìÖ Recordatorios de entrevistas
 * - üìù Asignaci√≥n de evaluaciones
 * - ‚úÖ Completaci√≥n de evaluaciones
 * - üéØ Decisiones de admisi√≥n
 * - ‚ö†Ô∏è Documentos faltantes
 * - üîÑ Recordatorios de seguimiento
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class NotificationService {

    private final EmailService emailService;
    private final UserRepository userRepository;
    
    @Value("${app.institutional-email.from-name:Colegio Monte Tabor y Nazaret}")
    private String institutionName;
    
    @Value("${app.base-url:http://localhost:8080}")
    private String baseUrl;

    // ================================
    // NOTIFICACIONES DE ESTADO DE APLICACI√ìN
    // ================================
    
    /**
     * Notifica cuando una aplicaci√≥n cambia de estado
     */
    @Async
    public CompletableFuture<Void> notifyApplicationStatusChange(
            Application application, 
            Application.ApplicationStatus fromStatus, 
            Application.ApplicationStatus toStatus) {
        
        try {
            String applicantEmail = application.getApplicantUser().getEmail();
            String studentName = getStudentFullName(application);
            
            String subject = buildStatusChangeSubject(toStatus, studentName);
            String body = buildStatusChangeBody(application, fromStatus, toStatus, studentName);
            
            emailService.sendSimpleMessage(applicantEmail, subject, body);
            
            log.info("üìß Notificaci√≥n de cambio de estado enviada: {} ‚Üí {} para aplicaci√≥n {}", 
                    fromStatus, toStatus, application.getId());
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando notificaci√≥n de cambio de estado para aplicaci√≥n {}", 
                    application.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }
    
    /**
     * Notifica documentos faltantes
     */
    @Async
    public CompletableFuture<Void> notifyMissingDocuments(Application application, List<String> missingDocuments) {
        try {
            String applicantEmail = application.getApplicantUser().getEmail();
            String studentName = getStudentFullName(application);
            
            String subject = "üìÑ Documentos Faltantes - " + studentName;
            String body = buildMissingDocumentsBody(application, studentName, missingDocuments);
            
            emailService.sendSimpleMessage(applicantEmail, subject, body);
            
            log.info("üìÑ Notificaci√≥n de documentos faltantes enviada para aplicaci√≥n {}", 
                    application.getId());
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando notificaci√≥n de documentos faltantes para aplicaci√≥n {}", 
                    application.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }

    // ================================
    // NOTIFICACIONES DE ENTREVISTAS
    // ================================
    
    /**
     * Notifica cuando se programa una entrevista
     */
    @Async
    public CompletableFuture<Void> notifyInterviewScheduled(Interview interview) {
        try {
            // Notificar al apoderado
            String applicantEmail = interview.getApplication().getApplicantUser().getEmail();
            String studentName = getStudentFullName(interview.getApplication());
            
            String subjectFamily = "üìÖ Entrevista Programada - " + studentName;
            String bodyFamily = buildInterviewScheduledBodyForFamily(interview, studentName);
            
            emailService.sendSimpleMessage(applicantEmail, subjectFamily, bodyFamily);
            
            // Notificar al entrevistador
            if (interview.getInterviewer() != null) {
                String interviewerEmail = interview.getInterviewer().getEmail();
                String subjectInterviewer = "üìÖ Nueva Entrevista Asignada - " + studentName;
                String bodyInterviewer = buildInterviewScheduledBodyForInterviewer(interview, studentName);
                
                emailService.sendSimpleMessage(interviewerEmail, subjectInterviewer, bodyInterviewer);
            }
            
            log.info("üìÖ Notificaciones de entrevista programada enviadas para aplicaci√≥n {}", 
                    interview.getApplication().getId());
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando notificaciones de entrevista programada {}", 
                    interview.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }
    
    /**
     * Recordatorio de entrevista (24 horas antes)
     */
    @Async
    public CompletableFuture<Void> sendInterviewReminder(Interview interview) {
        try {
            String applicantEmail = interview.getApplication().getApplicantUser().getEmail();
            String studentName = getStudentFullName(interview.getApplication());
            
            String subject = "üîî Recordatorio: Entrevista Ma√±ana - " + studentName;
            String body = buildInterviewReminderBody(interview, studentName);
            
            emailService.sendSimpleMessage(applicantEmail, subject, body);
            
            log.info("üîî Recordatorio de entrevista enviado para aplicaci√≥n {}", 
                    interview.getApplication().getId());
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando recordatorio de entrevista {}", interview.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }

    // ================================
    // NOTIFICACIONES DE EVALUACIONES
    // ================================
    
    /**
     * Notifica cuando se asigna una evaluaci√≥n a un profesor
     */
    @Async
    public CompletableFuture<Void> notifyEvaluationAssigned(Evaluation evaluation) {
        try {
            String evaluatorEmail = evaluation.getEvaluator().getEmail();
            String studentName = getStudentFullName(evaluation.getApplication());
            
            String subject = "üìù Nueva Evaluaci√≥n Asignada - " + studentName;
            String body = buildEvaluationAssignedBody(evaluation, studentName);
            
            emailService.sendSimpleMessage(evaluatorEmail, subject, body);
            
            log.info("üìù Notificaci√≥n de evaluaci√≥n asignada enviada a {}", evaluatorEmail);
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando notificaci√≥n de evaluaci√≥n asignada {}", 
                    evaluation.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }
    
    /**
     * Notifica cuando se completa una evaluaci√≥n
     */
    @Async
    public CompletableFuture<Void> notifyEvaluationCompleted(Evaluation evaluation) {
        try {
            // Notificar al coordinador acad√©mico
            List<User> coordinators = userRepository.findByRole(User.UserRole.COORDINATOR);
            
            for (User coordinator : coordinators) {
                String studentName = getStudentFullName(evaluation.getApplication());
                String subject = "‚úÖ Evaluaci√≥n Completada - " + studentName;
                String body = buildEvaluationCompletedBody(evaluation, studentName);
                
                emailService.sendSimpleMessage(coordinator.getEmail(), subject, body);
            }
            
            log.info("‚úÖ Notificaciones de evaluaci√≥n completada enviadas para evaluaci√≥n {}", 
                    evaluation.getId());
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando notificaciones de evaluaci√≥n completada {}", 
                    evaluation.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }

    // ================================
    // NOTIFICACIONES DE DECISI√ìN FINAL
    // ================================
    
    /**
     * Notifica la decisi√≥n final de admisi√≥n
     */
    @Async
    public CompletableFuture<Void> notifyAdmissionDecision(Application application) {
        try {
            String applicantEmail = application.getApplicantUser().getEmail();
            String studentName = getStudentFullName(application);
            
            String subject = buildAdmissionDecisionSubject(application.getStatus(), studentName);
            String body = buildAdmissionDecisionBody(application, studentName);
            
            emailService.sendSimpleMessage(applicantEmail, subject, body);
            
            log.info("üéØ Notificaci√≥n de decisi√≥n de admisi√≥n enviada para aplicaci√≥n {}", 
                    application.getId());
                    
        } catch (Exception e) {
            log.error("‚ùå Error enviando notificaci√≥n de decisi√≥n de admisi√≥n para aplicaci√≥n {}", 
                    application.getId(), e);
        }
        
        return CompletableFuture.completedFuture(null);
    }

    // ================================
    // M√âTODOS AUXILIARES
    // ================================
    
    private String getStudentFullName(Application application) {
        if (application.getStudent() == null) {
            return "Estudiante";
        }
        return String.format("%s %s %s", 
                application.getStudent().getFirstName() != null ? application.getStudent().getFirstName() : "",
                application.getStudent().getLastName() != null ? application.getStudent().getLastName() : "",
                application.getStudent().getMaternalLastName() != null ? application.getStudent().getMaternalLastName() : ""
        ).trim().replaceAll("\\s+", " ");
    }
    
    private String formatDate(LocalDate date) {
        return date.format(DateTimeFormatter.ofPattern("dd 'de' MMMM 'de' yyyy"));
    }
    
    private String formatDateTime(LocalDateTime dateTime) {
        return dateTime.format(DateTimeFormatter.ofPattern("dd 'de' MMMM 'de' yyyy 'a las' HH:mm"));
    }

    // ================================
    // TEMPLATES DE EMAILS
    // ================================
    
    private String buildStatusChangeSubject(Application.ApplicationStatus status, String studentName) {
        return switch (status) {
            case UNDER_REVIEW -> "üîÑ Su postulaci√≥n est√° en revisi√≥n - " + studentName;
            case INTERVIEW_SCHEDULED -> "üìÖ Entrevista programada - " + studentName;
            case EXAM_SCHEDULED -> "üìù Evaluaci√≥n programada - " + studentName;
            case APPROVED -> "üéâ ¬°Felicitaciones! Postulaci√≥n aprobada - " + studentName;
            case REJECTED -> "üìã Resultado de postulaci√≥n - " + studentName;
            case WAITLIST -> "‚è≥ Su postulaci√≥n est√° en lista de espera - " + studentName;
            case DOCUMENTS_REQUESTED -> "üìÑ Documentos adicionales requeridos - " + studentName;
            default -> "üìã Actualizaci√≥n de postulaci√≥n - " + studentName;
        };
    }
    
    private String buildStatusChangeBody(Application application, 
                                       Application.ApplicationStatus fromStatus,
                                       Application.ApplicationStatus toStatus, 
                                       String studentName) {
        String baseMessage = """
            Estimado/a apoderado/a,
            
            Le informamos que el estado de la postulaci√≥n de %s ha cambiado:
            
            Estado anterior: %s
            Estado actual: %s
            Fecha de actualizaci√≥n: %s
            
            """.formatted(studentName, getStatusDisplayName(fromStatus), 
                         getStatusDisplayName(toStatus), formatDateTime(LocalDateTime.now()));
        
        String statusSpecificMessage = switch (toStatus) {
            case UNDER_REVIEW -> """
                Su postulaci√≥n est√° ahora en revisi√≥n por nuestro equipo acad√©mico. 
                Verificaremos que todos los documentos est√©n completos y procederemos 
                con el siguiente paso del proceso.
                
                Tiempo estimado: 2-3 d√≠as h√°biles.
                """;
                
            case INTERVIEW_SCHEDULED -> """
                Se ha programado una entrevista para su hijo/a. Pronto recibir√° 
                un email separado con los detalles de fecha, hora y modalidad.
                
                Por favor, est√© atento/a a su correo electr√≥nico.
                """;
                
            case EXAM_SCHEDULED -> """
                Su hijo/a ha sido programado/a para las evaluaciones acad√©micas.
                Recibir√° informaci√≥n detallada sobre las fechas y modalidades 
                de las evaluaciones pr√≥ximamente.
                """;
                
            case APPROVED -> """
                ¬°Felicitaciones! Nos complace informarle que su hijo/a ha sido 
                ACEPTADO/A en nuestro colegio.
                
                Pr√≥ximos pasos:
                1. Recibir√° informaci√≥n sobre matr√≠cula en los pr√≥ximos d√≠as
                2. Complete el proceso de matr√≠cula dentro del plazo establecido
                3. Participe en las actividades de bienvenida
                
                ¬°Bienvenidos a la familia Monte Tabor & Nazaret!
                """;
                
            case REJECTED -> """
                Despu√©s de una cuidadosa evaluaci√≥n, lamentamos informarle que 
                en esta ocasi√≥n no podemos ofrecer un cupo para su hijo/a.
                
                Esta decisi√≥n no refleja las capacidades de su hijo/a, sino 
                las limitaciones de cupos disponibles y los criterios espec√≠ficos 
                de admisi√≥n para este per√≠odo.
                
                Le deseamos lo mejor en su b√∫squeda educacional.
                """;
                
            case WAITLIST -> """
                Su postulaci√≥n ha sido incluida en nuestra lista de espera.
                Esto significa que su hijo/a cumple con nuestros requisitos,
                pero actualmente no tenemos cupos disponibles.
                
                Le mantendremos informado/a si se abre un cupo disponible.
                Su posici√≥n en la lista de espera se basa en el orden de
                evaluaci√≥n y criterios acad√©micos.
                """;
                
            case DOCUMENTS_REQUESTED -> """
                Necesitamos documentos adicionales para continuar con el proceso
                de evaluaci√≥n. Recibir√° un email detallando los documentos
                espec√≠ficos requeridos.
                
                Por favor, proporcione los documentos solicitados a la brevedad
                para evitar retrasos en el proceso.
                """;
                
            default -> "Mant√©ngase atento/a a futuras comunicaciones.";
        };
        
        String footer = """
            
            Para consultas o dudas:
            üìß Email: admisiones@mtn.cl
            üìû Tel√©fono: +56 2 2234 5678
            üåê Web: www.mtn.cl
            
            Puede revisar el estado actualizado de su postulaci√≥n en nuestro 
            sistema en l√≠nea: %s
            
            Atentamente,
            Equipo de Admisiones
            %s
            """.formatted(baseUrl, institutionName);
            
        return baseMessage + statusSpecificMessage + footer;
    }
    
    private String buildMissingDocumentsBody(Application application, String studentName, List<String> missingDocuments) {
        StringBuilder docsBuilder = new StringBuilder();
        for (String doc : missingDocuments) {
            docsBuilder.append("‚Ä¢ ").append(getDocumentDisplayName(doc)).append("\n");
        }
        
        return """
            Estimado/a apoderado/a,
            
            Para continuar con el proceso de postulaci√≥n de %s, necesitamos 
            que nos proporcione los siguientes documentos:
            
            DOCUMENTOS FALTANTES:
            %s
            
            INSTRUCCIONES:
            1. Acceda a nuestro sistema en l√≠nea: %s
            2. Vaya a la secci√≥n "Documentos"
            3. Suba los documentos solicitados en formato PDF
            4. Aseg√∫rese de que los archivos sean legibles y completos
            
            IMPORTANTE:
            ‚Ä¢ Los documentos deben estar en formato PDF
            ‚Ä¢ Tama√±o m√°ximo por archivo: 10MB
            ‚Ä¢ Aseg√∫rese de que la informaci√≥n sea legible
            
            Si tiene dificultades t√©cnicas o preguntas sobre los documentos,
            no dude en contactarnos.
            
            üìß Email: admisiones@mtn.cl
            üìû Tel√©fono: +56 2 2234 5678
            
            Atentamente,
            Equipo de Admisiones
            %s
            """.formatted(studentName, docsBuilder.toString(), baseUrl, institutionName);
    }
    
    private String buildInterviewScheduledBodyForFamily(Interview interview, String studentName) {
        return """
            Estimado/a apoderado/a,
            
            Nos complace informarle que se ha programado una entrevista para %s 
            como parte del proceso de admisi√≥n.
            
            DETALLES DE LA ENTREVISTA:
            üìÖ Fecha: %s
            üïê Hora: %s
            üë• Tipo: %s
            üìç Modalidad: %s
            üë®‚Äçüè´ Entrevistador: %s
            
            INSTRUCCIONES:
            ‚Ä¢ Confirme su asistencia respondiendo a este email
            ‚Ä¢ Llegue 10 minutos antes de la hora programada
            ‚Ä¢ Traiga un documento de identidad
            ‚Ä¢ La entrevista durar√° aproximadamente 30-45 minutos
            
            Si necesita reprogramar por motivos justificados, contacte a:
            üìß admisiones@mtn.cl
            üìû +56 2 2234 5678
            
            Atentamente,
            Equipo de Admisiones
            %s
            """.formatted(
                studentName,
                formatDate(interview.getScheduledDate()),
                interview.getScheduledTime() != null ? interview.getScheduledTime().toString() : "Por confirmar",
                getInterviewTypeDisplayName(interview.getType()),
                getInterviewModeDisplayName(interview.getMode()),
                interview.getInterviewer() != null ? 
                    interview.getInterviewer().getFirstName() + " " + interview.getInterviewer().getLastName() 
                    : "Por asignar",
                institutionName
            );
    }
    
    private String buildInterviewScheduledBodyForInterviewer(Interview interview, String studentName) {
        return """
            Estimado/a colega,
            
            Se le ha asignado una nueva entrevista en el sistema de admisiones.
            
            DETALLES DE LA ENTREVISTA:
            üë• Estudiante: %s
            üìÖ Fecha: %s
            üïê Hora: %s
            üìç Modalidad: %s
            üìù Tipo: %s
            
            INFORMACI√ìN ADICIONAL:
            ‚Ä¢ Acceda al sistema para ver m√°s detalles del estudiante
            ‚Ä¢ Complete la evaluaci√≥n al finalizar la entrevista
            ‚Ä¢ Registre observaciones y recomendaciones
            
            Sistema de admisiones: %s
            
            Si tiene conflictos de horario, contacte inmediatamente a:
            üìß coordinacion@mtn.cl
            
            Saludos cordiales,
            Sistema de Admisiones
            %s
            """.formatted(
                studentName,
                formatDate(interview.getScheduledDate()),
                interview.getScheduledTime() != null ? interview.getScheduledTime().toString() : "Por confirmar",
                getInterviewModeDisplayName(interview.getMode()),
                getInterviewTypeDisplayName(interview.getType()),
                baseUrl,
                institutionName
            );
    }
    
    private String buildInterviewReminderBody(Interview interview, String studentName) {
        return """
            Estimado/a apoderado/a,
            
            Le recordamos que ma√±ana tiene programada la entrevista de %s.
            
            DETALLES:
            üìÖ Fecha: %s (MA√ëANA)
            üïê Hora: %s
            üìç Modalidad: %s
            
            RECORDATORIOS:
            ‚úÖ Confirme que tiene la fecha y hora correctas
            ‚úÖ Llegue 10 minutos antes
            ‚úÖ Traiga documento de identidad
            ‚úÖ Prepare cualquier pregunta que desee hacer
            
            Si necesita reprogramar por emergencia, contacte inmediatamente a:
            üìû +56 2 2234 5678
            üìß admisiones@mtn.cl
            
            ¬°Los esperamos!
            
            Equipo de Admisiones
            %s
            """.formatted(
                studentName,
                formatDate(interview.getScheduledDate()),
                interview.getScheduledTime() != null ? interview.getScheduledTime().toString() : "Por confirmar",
                getInterviewModeDisplayName(interview.getMode()),
                institutionName
            );
    }
    
    private String buildEvaluationAssignedBody(Evaluation evaluation, String studentName) {
        return """
            Estimado/a profesor/a,
            
            Se le ha asignado una nueva evaluaci√≥n en el sistema de admisiones.
            
            DETALLES DE LA EVALUACI√ìN:
            üë• Estudiante: %s
            üìù Tipo de evaluaci√≥n: %s
            üìÖ Fecha de asignaci√≥n: %s
            
            ACCIONES REQUERIDAS:
            1. Acceda al sistema de admisiones: %s
            2. Revise la informaci√≥n del estudiante
            3. Complete la evaluaci√≥n seg√∫n los criterios establecidos
            4. Registre sus observaciones y calificaci√≥n
            
            IMPORTANTE:
            ‚Ä¢ Complete la evaluaci√≥n dentro de los pr√≥ximos 5 d√≠as h√°biles
            ‚Ä¢ Use los criterios de evaluaci√≥n institucionales
            ‚Ä¢ Registre observaciones detalladas y constructivas
            
            Si tiene preguntas sobre la evaluaci√≥n, contacte a:
            üìß coordinacion@mtn.cl
            
            Saludos cordiales,
            Sistema de Admisiones
            %s
            """.formatted(
                studentName,
                getEvaluationTypeDisplayName(evaluation.getEvaluationType()),
                formatDateTime(LocalDateTime.now()),
                baseUrl,
                institutionName
            );
    }
    
    private String buildEvaluationCompletedBody(Evaluation evaluation, String studentName) {
        return """
            Estimado/a coordinador/a,
            
            Se ha completado una evaluaci√≥n en el sistema de admisiones.
            
            DETALLES:
            üë• Estudiante: %s
            üìù Tipo de evaluaci√≥n: %s
            üë®‚Äçüè´ Evaluador: %s
            ‚≠ê Calificaci√≥n: %s
            üìÖ Fecha de completaci√≥n: %s
            
            La evaluaci√≥n est√° disponible para revisi√≥n en el sistema.
            
            Sistema de admisiones: %s
            
            Saludos cordiales,
            Sistema de Admisiones
            %s
            """.formatted(
                studentName,
                getEvaluationTypeDisplayName(evaluation.getEvaluationType()),
                evaluation.getEvaluator().getFirstName() + " " + evaluation.getEvaluator().getLastName(),
                evaluation.getScore() != null ? evaluation.getScore().toString() : "No calificada",
                formatDateTime(LocalDateTime.now()),
                baseUrl,
                institutionName
            );
    }
    
    private String buildAdmissionDecisionSubject(Application.ApplicationStatus status, String studentName) {
        return switch (status) {
            case APPROVED -> "üéâ ¬°Felicitaciones! " + studentName + " ha sido aceptado/a";
            case REJECTED -> "üìã Resultado del proceso de admisi√≥n - " + studentName;
            case WAITLIST -> "‚è≥ Lista de espera - " + studentName;
            default -> "üìã Decisi√≥n de admisi√≥n - " + studentName;
        };
    }
    
    private String buildAdmissionDecisionBody(Application application, String studentName) {
        String baseMessage = """
            Estimado/a apoderado/a,
            
            Despu√©s de completar todo el proceso de evaluaci√≥n, tenemos 
            el resultado final de la postulaci√≥n de %s:
            
            DECISI√ìN: %s
            Fecha de decisi√≥n: %s
            
            """.formatted(studentName, getStatusDisplayName(application.getStatus()), 
                         formatDateTime(LocalDateTime.now()));
        
        String decisionSpecificMessage = switch (application.getStatus()) {
            case APPROVED -> """
                ¬°FELICITACIONES! Nos complace enormemente informarle que %s 
                ha sido ACEPTADO/A en nuestro colegio para el pr√≥ximo a√±o acad√©mico.
                
                PR√ìXIMOS PASOS IMPORTANTES:
                1. üìã Complete el proceso de matr√≠cula (enlace ser√° enviado)
                2. üìÖ Asista a la jornada de bienvenida para nuevos estudiantes
                3. üìö Participe en las actividades de integraci√≥n
                4. üè´ Conozca las instalaciones y profesores
                
                INFORMACI√ìN IMPORTANTE:
                ‚Ä¢ Plazo para matr√≠cula: 10 d√≠as h√°biles desde esta notificaci√≥n
                ‚Ä¢ Lista de √∫tiles escolares ser√° enviada pr√≥ximamente
                ‚Ä¢ Calendario escolar y horarios disponibles en nuestro sitio web
                
                ¬°Bienvenidos a la familia Monte Tabor & Nazaret! 
                Estamos emocionados de acompa√±ar a %s en su crecimiento acad√©mico y personal.
                """.formatted(studentName, studentName);
                
            case REJECTED -> """
                Despu√©s de una evaluaci√≥n exhaustiva y cuidadosa, lamentamos 
                informarle que en esta ocasi√≥n no podemos ofrecer un cupo 
                para %s en nuestro colegio.
                
                CONSIDERACIONES IMPORTANTES:
                ‚Ä¢ Esta decisi√≥n se basa en m√∫ltiples factores y limitaciones de cupos
                ‚Ä¢ No refleja las capacidades o potencial de %s
                ‚Ä¢ El proceso fue riguroso y equitativo para todos los postulantes
                
                Le agradecemos sinceramente por considerar nuestro colegio y 
                le deseamos el mayor de los √©xitos en la b√∫squeda de la 
                instituci√≥n educacional m√°s adecuada para %s.
                """.formatted(studentName, studentName, studentName);
                
            case WAITLIST -> """
                Su postulaci√≥n ha sido incluida en nuestra LISTA DE ESPERA.
                
                ¬øQU√â SIGNIFICA ESTO?
                ‚Ä¢ %s cumple con nuestros est√°ndares acad√©micos y de admisi√≥n
                ‚Ä¢ Actualmente no tenemos cupos disponibles en el nivel solicitado
                ‚Ä¢ Ser√° contactado/a si se libera un cupo
                
                INFORMACI√ìN IMPORTANTE:
                ‚Ä¢ Su posici√≥n se mantiene hasta [fecha l√≠mite]
                ‚Ä¢ Le notificaremos inmediatamente si hay disponibilidad
                ‚Ä¢ Puede considerar otras opciones mientras tanto
                
                Agradecemos su paciencia y comprensi√≥n. Mantendremos 
                comunicaci√≥n constante sobre cualquier novedad.
                """.formatted(studentName);
                
            default -> "Mant√©ngase atento/a a futuras comunicaciones.";
        };
        
        String footer = """
            
            Para cualquier consulta sobre esta decisi√≥n:
            üìß Email: admisiones@mtn.cl
            üìû Tel√©fono: +56 2 2234 5678
            üè´ Direcci√≥n: [Direcci√≥n del colegio]
            üåê Web: www.mtn.cl
            
            Gracias por su inter√©s en nuestro colegio.
            
            Cordialmente,
            Comit√© de Admisiones
            %s
            """.formatted(institutionName);
            
        return baseMessage + decisionSpecificMessage + footer;
    }

    // ================================
    // M√âTODOS DE FORMATEO DISPLAY
    // ================================
    
    private String getStatusDisplayName(Application.ApplicationStatus status) {
        return switch (status) {
            case PENDING -> "Pendiente";
            case UNDER_REVIEW -> "En Revisi√≥n";
            case INTERVIEW_SCHEDULED -> "Entrevista Programada";
            case EXAM_SCHEDULED -> "Evaluaci√≥n Programada";
            case APPROVED -> "APROBADA ‚úÖ";
            case REJECTED -> "No Aprobada";
            case WAITLIST -> "Lista de Espera";
            case DOCUMENTS_REQUESTED -> "Documentos Requeridos";
            default -> status.toString();
        };
    }
    
    private String getDocumentDisplayName(String docType) {
        return switch (docType) {
            case "BIRTH_CERTIFICATE" -> "Certificado de Nacimiento";
            case "STUDENT_PHOTO" -> "Fotograf√≠a del Estudiante";
            case "ACADEMIC_RECORDS" -> "Registros Acad√©micos";
            case "MEDICAL_CERTIFICATE" -> "Certificado M√©dico";
            case "PARENT_ID" -> "C√©dula de Identidad del Apoderado";
            default -> docType;
        };
    }
    
    private String getInterviewTypeDisplayName(Interview.InterviewType type) {
        if (type == null) return "No especificado";
        return switch (type) {
            case INDIVIDUAL -> "Entrevista Individual";
            case FAMILY -> "Entrevista Familiar";
            case PSYCHOLOGICAL -> "Entrevista Psicol√≥gica";
            case ACADEMIC -> "Entrevista Acad√©mica";
            case BEHAVIORAL -> "Entrevista de Comportamiento";
            default -> type.toString();
        };
    }
    
    private String getInterviewModeDisplayName(Interview.InterviewMode mode) {
        if (mode == null) return "No especificado";
        return switch (mode) {
            case IN_PERSON -> "Presencial";
            case VIRTUAL -> "Virtual";
            case HYBRID -> "H√≠brida";
            default -> mode.toString();
        };
    }
    
    private String getEvaluationTypeDisplayName(Evaluation.EvaluationType type) {
        if (type == null) return "No especificado";
        return switch (type) {
            case LANGUAGE_EXAM -> "Evaluaci√≥n de Lenguaje";
            case MATHEMATICS_EXAM -> "Evaluaci√≥n de Matem√°ticas";
            case ENGLISH_EXAM -> "Evaluaci√≥n de Ingl√©s";
            case CYCLE_DIRECTOR_REPORT -> "Informe Director de Ciclo";
            case CYCLE_DIRECTOR_INTERVIEW -> "Entrevista Director de Ciclo";
            case PSYCHOLOGICAL_INTERVIEW -> "Entrevista Psicol√≥gica";
            default -> type.toString();
        };
    }
}