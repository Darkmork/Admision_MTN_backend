package com.desafios.admision_mtn.service;

import com.desafios.admision_mtn.entity.Application;
import com.desafios.admision_mtn.entity.Interview;
import com.desafios.admision_mtn.entity.Evaluation;
import com.desafios.admision_mtn.repository.ApplicationRepository;
import com.desafios.admision_mtn.repository.InterviewRepository;
import com.desafios.admision_mtn.repository.EvaluationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;

/**
 * Servicio para validar transiciones de estado de aplicaciones
 * 
 * Garantiza que las aplicaciones solo puedan avanzar a estados v√°lidos
 * seg√∫n las reglas de negocio del proceso de admisi√≥n:
 * 
 * FLUJO PRINCIPAL:
 * PENDING ‚Üí UNDER_REVIEW ‚Üí INTERVIEW_SCHEDULED ‚Üí EXAM_SCHEDULED ‚Üí APPROVED/REJECTED/WAITLIST
 * 
 * VALIDACIONES ESPEC√çFICAS:
 * - Documentos requeridos completados para cada transici√≥n
 * - Entrevistas programadas y completadas
 * - Evaluaciones acad√©micas finalizadas
 * - Criterios de tiempo y fechas l√≠mite
 * - Reglas de negocio espec√≠ficas por estado
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class StateTransitionValidationService {

    private final ApplicationRepository applicationRepository;
    private final InterviewRepository interviewRepository;
    private final EvaluationRepository evaluationRepository;

    /**
     * Valida si una aplicaci√≥n puede transicionar a un nuevo estado
     */
    public ValidationResult validateTransition(Long applicationId, 
                                             Application.ApplicationStatus fromStatus,
                                             Application.ApplicationStatus toStatus) {
        log.debug("üîç Validando transici√≥n para aplicaci√≥n {} de {} a {}", 
                applicationId, fromStatus, toStatus);
        
        try {
            // Validaciones b√°sicas
            ValidationResult basicValidation = validateBasicTransition(applicationId, fromStatus, toStatus);
            if (!basicValidation.isValid()) {
                return basicValidation;
            }
            
            // Validaciones espec√≠ficas por estado destino
            ValidationResult specificValidation = validateSpecificTransition(applicationId, fromStatus, toStatus);
            if (!specificValidation.isValid()) {
                return specificValidation;
            }
            
            // Validaciones de reglas de negocio
            ValidationResult businessValidation = validateBusinessRules(applicationId, fromStatus, toStatus);
            if (!businessValidation.isValid()) {
                return businessValidation;
            }
            
            log.info("‚úÖ Transici√≥n validada correctamente: aplicaci√≥n {} puede avanzar de {} a {}", 
                    applicationId, fromStatus, toStatus);
            
            return ValidationResult.valid("Transici√≥n permitida");
            
        } catch (Exception e) {
            log.error("‚ùå Error validando transici√≥n para aplicaci√≥n {}", applicationId, e);
            return ValidationResult.invalid("Error interno validando transici√≥n: " + e.getMessage());
        }
    }

    /**
     * Validaciones b√°sicas de la transici√≥n
     */
    private ValidationResult validateBasicTransition(Long applicationId, 
                                                   Application.ApplicationStatus fromStatus,
                                                   Application.ApplicationStatus toStatus) {
        
        // Verificar que la aplicaci√≥n existe
        Optional<Application> applicationOpt = applicationRepository.findById(applicationId);
        if (applicationOpt.isEmpty()) {
            return ValidationResult.invalid("Aplicaci√≥n no encontrada: " + applicationId);
        }
        
        Application application = applicationOpt.get();
        
        // Verificar que el estado actual coincida
        if (application.getStatus() != fromStatus) {
            return ValidationResult.invalid(
                String.format("Estado actual (%s) no coincide con el estado origen (%s)", 
                            application.getStatus(), fromStatus));
        }
        
        // No permitir transiciones circulares
        if (fromStatus == toStatus) {
            return ValidationResult.invalid("No se permite transicionar al mismo estado");
        }
        
        // Validar que la transici√≥n est√© permitida seg√∫n el flujo
        if (!isTransitionAllowed(fromStatus, toStatus)) {
            return ValidationResult.invalid(
                String.format("Transici√≥n no permitida de %s a %s", fromStatus, toStatus));
        }
        
        return ValidationResult.valid("Validaciones b√°sicas correctas");
    }

    /**
     * Validaciones espec√≠ficas por estado destino
     */
    private ValidationResult validateSpecificTransition(Long applicationId,
                                                      Application.ApplicationStatus fromStatus,
                                                      Application.ApplicationStatus toStatus) {
        
        switch (toStatus) {
            case UNDER_REVIEW:
                return validateTransitionToUnderReview(applicationId);
                
            case INTERVIEW_SCHEDULED:
                return validateTransitionToInterviewScheduled(applicationId);
                
            case EXAM_SCHEDULED:
                return validateTransitionToExamScheduled(applicationId);
                
            case DOCUMENTS_REQUESTED:
                return validateTransitionToDocumentsRequested(applicationId);
                
            case APPROVED:
                return validateTransitionToApproved(applicationId);
                
            case REJECTED:
                return validateTransitionToRejected(applicationId);
                
            case WAITLIST:
                return validateTransitionToWaitlist(applicationId);
                
            default:
                return ValidationResult.valid("Sin validaciones espec√≠ficas para " + toStatus);
        }
    }

    /**
     * Validaci√≥n para transici√≥n a UNDER_REVIEW
     */
    private ValidationResult validateTransitionToUnderReview(Long applicationId) {
        // Verificar que la aplicaci√≥n tenga los datos m√≠nimos requeridos
        Optional<Application> applicationOpt = applicationRepository.findById(applicationId);
        if (applicationOpt.isEmpty()) {
            return ValidationResult.invalid("Aplicaci√≥n no encontrada");
        }
        
        Application application = applicationOpt.get();
        
        // Validar que tenga estudiante asociado
        if (application.getStudent() == null) {
            return ValidationResult.invalid("Aplicaci√≥n debe tener estudiante asociado");
        }
        
        // Validar que tenga al menos un apoderado
        if (application.getApplicantUser() == null) {
            return ValidationResult.invalid("Aplicaci√≥n debe tener usuario solicitante");
        }
        
        return ValidationResult.valid("Aplicaci√≥n lista para revisi√≥n");
    }

    /**
     * Validaci√≥n para transici√≥n a INTERVIEW_SCHEDULED
     */
    private ValidationResult validateTransitionToInterviewScheduled(Long applicationId) {
        // Verificar que la revisi√≥n inicial est√© completa
        // En este punto podr√≠amos validar que haya pasado tiempo m√≠nimo en UNDER_REVIEW
        
        Optional<Application> applicationOpt = applicationRepository.findById(applicationId);
        if (applicationOpt.isEmpty()) {
            return ValidationResult.invalid("Aplicaci√≥n no encontrada");
        }
        
        Application application = applicationOpt.get();
        
        // Verificar que haya pasado tiempo m√≠nimo en revisi√≥n (ejemplo: 1 d√≠a)
        if (application.getUpdatedAt() != null) {
            LocalDateTime oneDayAgo = LocalDateTime.now().minusDays(1);
            if (application.getUpdatedAt().isAfter(oneDayAgo)) {
                return ValidationResult.invalid("Aplicaci√≥n debe estar en revisi√≥n por al menos 24 horas");
            }
        }
        
        return ValidationResult.valid("Aplicaci√≥n lista para programar entrevista");
    }

    /**
     * Validaci√≥n para transici√≥n a EXAM_SCHEDULED
     */
    private ValidationResult validateTransitionToExamScheduled(Long applicationId) {
        // Verificar que las entrevistas est√©n completadas
        List<Interview> interviews = interviewRepository.findByApplication_IdOrderByCreatedAtDesc(applicationId);
        
        if (interviews.isEmpty()) {
            return ValidationResult.invalid("No se pueden programar ex√°menes sin entrevistas completadas");
        }
        
        // Verificar que al menos una entrevista est√© completada con resultado positivo
        boolean hasCompletedPositiveInterview = interviews.stream()
                .anyMatch(interview -> 
                    interview.getStatus() == Interview.InterviewStatus.COMPLETED &&
                    interview.getResult() == Interview.InterviewResult.POSITIVE
                );
        
        if (!hasCompletedPositiveInterview) {
            return ValidationResult.invalid("Debe tener al menos una entrevista completada con resultado positivo");
        }
        
        return ValidationResult.valid("Aplicaci√≥n lista para programar ex√°menes");
    }

    /**
     * Validaci√≥n para transici√≥n a DOCUMENTS_REQUESTED
     */
    private ValidationResult validateTransitionToDocumentsRequested(Long applicationId) {
        // Esta transici√≥n puede ocurrir desde varios estados cuando faltan documentos
        return ValidationResult.valid("Transici√≥n v√°lida para solicitar documentos");
    }

    /**
     * Validaci√≥n para transici√≥n a APPROVED
     */
    private ValidationResult validateTransitionToApproved(Long applicationId) {
        // Verificar que las evaluaciones est√©n completadas
        List<Evaluation> evaluations = evaluationRepository.findByApplication_IdOrderByCreatedAtDesc(applicationId);
        
        if (evaluations.isEmpty()) {
            return ValidationResult.invalid("No se puede aprobar sin evaluaciones completadas");
        }
        
        // Verificar que todas las evaluaciones est√©n completadas
        boolean allEvaluationsCompleted = evaluations.stream()
                .allMatch(evaluation -> evaluation.getStatus() == Evaluation.EvaluationStatus.COMPLETED);
        
        if (!allEvaluationsCompleted) {
            return ValidationResult.invalid("Todas las evaluaciones deben estar completadas para aprobar");
        }
        
        // Verificar que las evaluaciones tengan resultados positivos
        boolean hasPositiveEvaluations = evaluations.stream()
                .anyMatch(evaluation -> 
                    evaluation.getFinalRecommendation() != null && 
                    evaluation.getFinalRecommendation()
                );
        
        if (!hasPositiveEvaluations) {
            return ValidationResult.invalid("Debe tener al menos una evaluaci√≥n con recomendaci√≥n positiva");
        }
        
        return ValidationResult.valid("Aplicaci√≥n cumple criterios para aprobaci√≥n");
    }

    /**
     * Validaci√≥n para transici√≥n a REJECTED
     */
    private ValidationResult validateTransitionToRejected(Long applicationId) {
        // Las aplicaciones pueden ser rechazadas en cualquier momento si hay motivo v√°lido
        // Aqu√≠ podr√≠amos agregar validaciones espec√≠ficas si hay reglas de negocio particulares
        return ValidationResult.valid("Transici√≥n v√°lida para rechazo");
    }

    /**
     * Validaci√≥n para transici√≥n a WAITLIST
     */
    private ValidationResult validateTransitionToWaitlist(Long applicationId) {
        // Similar a aprobaci√≥n pero con criterios de lista de espera
        List<Evaluation> evaluations = evaluationRepository.findByApplication_IdOrderByCreatedAtDesc(applicationId);
        
        if (evaluations.isEmpty()) {
            return ValidationResult.invalid("No se puede poner en lista de espera sin evaluaciones");
        }
        
        boolean hasCompletedEvaluations = evaluations.stream()
                .anyMatch(evaluation -> evaluation.getStatus() == Evaluation.EvaluationStatus.COMPLETED);
        
        if (!hasCompletedEvaluations) {
            return ValidationResult.invalid("Debe tener al menos una evaluaci√≥n completada para lista de espera");
        }
        
        return ValidationResult.valid("Aplicaci√≥n cumple criterios para lista de espera");
    }

    /**
     * Validaciones de reglas de negocio espec√≠ficas
     */
    private ValidationResult validateBusinessRules(Long applicationId,
                                                 Application.ApplicationStatus fromStatus,
                                                 Application.ApplicationStatus toStatus) {
        
        Optional<Application> applicationOpt = applicationRepository.findById(applicationId);
        if (applicationOpt.isEmpty()) {
            return ValidationResult.invalid("Aplicaci√≥n no encontrada");
        }
        
        Application application = applicationOpt.get();
        
        // Regla: No permitir cambios despu√©s de 30 d√≠as desde creaci√≥n (ejemplo)
        if (application.getCreatedAt() != null) {
            LocalDateTime thirtyDaysAgo = LocalDateTime.now().minusDays(30);
            if (application.getCreatedAt().isBefore(thirtyDaysAgo)) {
                return ValidationResult.invalid("No se pueden modificar aplicaciones de m√°s de 30 d√≠as");
            }
        }
        
        // Regla: No permitir retrocesos excepto a DOCUMENTS_REQUESTED
        if (isBackwardTransition(fromStatus, toStatus) && toStatus != Application.ApplicationStatus.DOCUMENTS_REQUESTED) {
            return ValidationResult.invalid("No se permiten transiciones hacia atr√°s excepto para solicitar documentos");
        }
        
        // Regla: Estados finales no pueden cambiar
        if (isFinalStatus(fromStatus)) {
            return ValidationResult.invalid("No se puede modificar una aplicaci√≥n en estado final: " + fromStatus);
        }
        
        return ValidationResult.valid("Reglas de negocio validadas correctamente");
    }

    /**
     * Verifica si una transici√≥n est√° permitida seg√∫n el flujo del proceso
     */
    private boolean isTransitionAllowed(Application.ApplicationStatus from, Application.ApplicationStatus to) {
        // Definir las transiciones permitidas
        Map<Application.ApplicationStatus, Set<Application.ApplicationStatus>> allowedTransitions = Map.of(
            Application.ApplicationStatus.PENDING, Set.of(
                Application.ApplicationStatus.UNDER_REVIEW,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED,
                Application.ApplicationStatus.REJECTED
            ),
            Application.ApplicationStatus.UNDER_REVIEW, Set.of(
                Application.ApplicationStatus.INTERVIEW_SCHEDULED,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED,
                Application.ApplicationStatus.REJECTED
            ),
            Application.ApplicationStatus.INTERVIEW_SCHEDULED, Set.of(
                Application.ApplicationStatus.EXAM_SCHEDULED,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED,
                Application.ApplicationStatus.REJECTED,
                Application.ApplicationStatus.WAITLIST
            ),
            Application.ApplicationStatus.EXAM_SCHEDULED, Set.of(
                Application.ApplicationStatus.APPROVED,
                Application.ApplicationStatus.REJECTED,
                Application.ApplicationStatus.WAITLIST,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED
            ),
            Application.ApplicationStatus.DOCUMENTS_REQUESTED, Set.of(
                Application.ApplicationStatus.UNDER_REVIEW,
                Application.ApplicationStatus.PENDING,
                Application.ApplicationStatus.REJECTED
            )
        );
        
        Set<Application.ApplicationStatus> allowedTargets = allowedTransitions.get(from);
        return allowedTargets != null && allowedTargets.contains(to);
    }

    /**
     * Verifica si una transici√≥n es hacia atr√°s en el proceso
     */
    private boolean isBackwardTransition(Application.ApplicationStatus from, Application.ApplicationStatus to) {
        // Definir el orden del proceso (n√∫meros m√°s altos = m√°s avanzado)
        Map<Application.ApplicationStatus, Integer> statusOrder = Map.of(
            Application.ApplicationStatus.PENDING, 1,
            Application.ApplicationStatus.UNDER_REVIEW, 2,
            Application.ApplicationStatus.INTERVIEW_SCHEDULED, 3,
            Application.ApplicationStatus.EXAM_SCHEDULED, 4,
            Application.ApplicationStatus.APPROVED, 5,
            Application.ApplicationStatus.REJECTED, 5,
            Application.ApplicationStatus.WAITLIST, 5,
            Application.ApplicationStatus.DOCUMENTS_REQUESTED, 0 // Especial: puede ocurrir en cualquier momento
        );
        
        Integer fromOrder = statusOrder.get(from);
        Integer toOrder = statusOrder.get(to);
        
        if (fromOrder == null || toOrder == null) {
            return false;
        }
        
        // DOCUMENTS_REQUESTED es especial, no se considera retroceso
        if (to == Application.ApplicationStatus.DOCUMENTS_REQUESTED) {
            return false;
        }
        
        return fromOrder > toOrder;
    }

    /**
     * Verifica si un estado es final (no se puede cambiar)
     */
    private boolean isFinalStatus(Application.ApplicationStatus status) {
        return status == Application.ApplicationStatus.APPROVED ||
               status == Application.ApplicationStatus.REJECTED ||
               status == Application.ApplicationStatus.WAITLIST;
    }

    /**
     * Obtiene todas las transiciones v√°lidas desde un estado dado
     */
    public Set<Application.ApplicationStatus> getValidTransitions(Application.ApplicationStatus fromStatus) {
        Map<Application.ApplicationStatus, Set<Application.ApplicationStatus>> allowedTransitions = Map.of(
            Application.ApplicationStatus.PENDING, Set.of(
                Application.ApplicationStatus.UNDER_REVIEW,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED,
                Application.ApplicationStatus.REJECTED
            ),
            Application.ApplicationStatus.UNDER_REVIEW, Set.of(
                Application.ApplicationStatus.INTERVIEW_SCHEDULED,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED,
                Application.ApplicationStatus.REJECTED
            ),
            Application.ApplicationStatus.INTERVIEW_SCHEDULED, Set.of(
                Application.ApplicationStatus.EXAM_SCHEDULED,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED,
                Application.ApplicationStatus.REJECTED,
                Application.ApplicationStatus.WAITLIST
            ),
            Application.ApplicationStatus.EXAM_SCHEDULED, Set.of(
                Application.ApplicationStatus.APPROVED,
                Application.ApplicationStatus.REJECTED,
                Application.ApplicationStatus.WAITLIST,
                Application.ApplicationStatus.DOCUMENTS_REQUESTED
            ),
            Application.ApplicationStatus.DOCUMENTS_REQUESTED, Set.of(
                Application.ApplicationStatus.UNDER_REVIEW,
                Application.ApplicationStatus.PENDING,
                Application.ApplicationStatus.REJECTED
            ),
            Application.ApplicationStatus.APPROVED, Set.of(), // Estado final
            Application.ApplicationStatus.REJECTED, Set.of(), // Estado final
            Application.ApplicationStatus.WAITLIST, Set.of()  // Estado final
        );
        
        return allowedTransitions.getOrDefault(fromStatus, Set.of());
    }

    /**
     * Clase para el resultado de validaci√≥n
     */
    public static class ValidationResult {
        private final boolean valid;
        private final String message;
        private final List<String> errors;
        private final Map<String, Object> metadata;
        
        private ValidationResult(boolean valid, String message, List<String> errors, Map<String, Object> metadata) {
            this.valid = valid;
            this.message = message;
            this.errors = errors != null ? new ArrayList<>(errors) : new ArrayList<>();
            this.metadata = metadata != null ? new HashMap<>(metadata) : new HashMap<>();
        }
        
        public static ValidationResult valid(String message) {
            return new ValidationResult(true, message, null, null);
        }
        
        public static ValidationResult invalid(String message) {
            return new ValidationResult(false, message, List.of(message), null);
        }
        
        public static ValidationResult invalid(String message, List<String> errors) {
            return new ValidationResult(false, message, errors, null);
        }
        
        public boolean isValid() { return valid; }
        public String getMessage() { return message; }
        public List<String> getErrors() { return new ArrayList<>(errors); }
        public Map<String, Object> getMetadata() { return new HashMap<>(metadata); }
        
        public ValidationResult withMetadata(String key, Object value) {
            Map<String, Object> newMetadata = new HashMap<>(this.metadata);
            newMetadata.put(key, value);
            return new ValidationResult(this.valid, this.message, this.errors, newMetadata);
        }
    }
}